#include <iostream>
#include <sqlite3.h>
#include <string>

using namespace std;

// Callback function to display query results
static int callback(void *data, int argc, char **argv, char **azColName) {
    for (int i = 0; i < argc; i++) {
        cout << azColName[i] << " = " << (argv[i] ? argv[i] : "NULL") << endl;
    }
    cout << "\n";
    return 0;
}

// Function to create the contact table if it doesn't exist
void createTable(sqlite3 *db) {
    const char *sql = "CREATE TABLE IF NOT EXISTS CONTACTS("
                      "ID INTEGER PRIMARY KEY AUTOINCREMENT, "
                      "NAME TEXT NOT NULL, "
                      "PHONE TEXT NOT NULL, "
                      "EMAIL TEXT NOT NULL);";
    char *errMsg;
    int rc = sqlite3_exec(db, sql, callback, 0, &errMsg);
    if (rc != SQLITE_OK) {
        cout << "SQL Error: " << errMsg << endl;
        sqlite3_free(errMsg);
    } else {
        cout << "Table created successfully!" << endl;
    }
}

// Function to add a contact
void addContact(sqlite3 *db) {
    string name, phone, email;
    cout << "Enter Name: ";
    cin.ignore();  // Clear the input buffer
    getline(cin, name);
    cout << "Enter Phone Number: ";
    getline(cin, phone);
    cout << "Enter Email: ";
    getline(cin, email);

    string sql = "INSERT INTO CONTACTS (NAME, PHONE, EMAIL) VALUES ('" + name + "', '" + phone + "', '" + email + "');";
    char *errMsg;
    int rc = sqlite3_exec(db, sql.c_str(), callback, 0, &errMsg);
    if (rc != SQLITE_OK) {
        cout << "SQL Error: " << errMsg << endl;
        sqlite3_free(errMsg);
    } else {
        cout << "Contact added successfully!" << endl;
    }
}

// Function to view all contacts
void viewContacts(sqlite3 *db) {
    const char *sql = "SELECT * FROM CONTACTS;";
    char *errMsg;
    int rc = sqlite3_exec(db, sql, callback, 0, &errMsg);
    if (rc != SQLITE_OK) {
        cout << "SQL Error: " << errMsg << endl;
        sqlite3_free(errMsg);
    }
}

// Function to search for a contact by name
void searchContact(sqlite3 *db) {
    string name;
    cout << "Enter name to search: ";
    cin.ignore();
    getline(cin, name);

    string sql = "SELECT * FROM CONTACTS WHERE NAME LIKE '%" + name + "%';";
    char *errMsg;
    int rc = sqlite3_exec(db, sql.c_str(), callback, 0, &errMsg);
    if (rc != SQLITE_OK) {
        cout << "SQL Error: " << errMsg << endl;
        sqlite3_free(errMsg);
    }
}

// Function to delete a contact by ID
void deleteContact(sqlite3 *db) {
    int id;
    cout << "Enter Contact ID to delete: ";
    cin >> id;

    string sql = "DELETE FROM CONTACTS WHERE ID = " + to_string(id) + ";";
    char *errMsg;
    int rc = sqlite3_exec(db, sql.c_str(), callback, 0, &errMsg);
    if (rc != SQLITE_OK) {
        cout << "SQL Error: " << errMsg << endl;
        sqlite3_free(errMsg);
    } else {
        cout << "Contact deleted successfully!" << endl;
    }
}

// Function to update a contact's information
void updateContact(sqlite3 *db) {
    int id;
    string new_name, new_phone, new_email;
    cout << "Enter Contact ID to update: ";
    cin >> id;
    cout << "Enter New Name: ";
    cin.ignore();
    getline(cin, new_name);
    cout << "Enter New Phone Number: ";
    getline(cin, new_phone);
    cout << "Enter New Email: ";
    getline(cin, new_email);

    string sql = "UPDATE CONTACTS SET NAME = '" + new_name + "', PHONE = '" + new_phone + "', EMAIL = '" + new_email + "' WHERE ID = " + to_string(id) + ";";
    char *errMsg;
    int rc = sqlite3_exec(db, sql.c_str(), callback, 0, &errMsg);
    if (rc != SQLITE_OK) {
        cout << "SQL Error: " << errMsg << endl;
        sqlite3_free(errMsg);
    } else {
        cout << "Contact updated successfully!" << endl;
    }
}

int main() {
    sqlite3 *db;
    int rc = sqlite3_open("contacts.db", &db); // Open or create the database

    if (rc) {
        cout << "Can't open database: " << sqlite3_errmsg(db) << endl;
        return(0);
    } else {
        cout << "Opened database successfully!" << endl;
    }

    // Create the table if it doesn't exist
    createTable(db);

    int choice;
    do {
        cout << "\nSimple Contact Management System\n";
        cout << "1. Add Contact\n";
        cout << "2. View Contacts\n";
        cout << "3. Search Contact\n";
        cout << "4. Update Contact\n";
        cout << "5. Delete Contact\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: addContact(db); break;
            case 2: viewContacts(db); break;
            case 3: searchContact(db); break;
            case 4: updateContact(db); break;
            case 5: deleteContact(db); break;
            case 6: cout << "Exiting...\n"; break;
            default: cout << "Invalid choice! Try again.\n"; break;
        }
    } while (choice != 6);

    sqlite3_close(db);  // Close the database connection
    return 0;
}
